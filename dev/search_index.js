var documenterSearchIndex = {"docs":
[{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"(Image: Build Status) (Image: license: MIT) (Image: codecov)","category":"page"},{"location":"#DyadicKDE.jl","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"","category":"section"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"Dyadic kernel density estimation in Julia.","category":"page"},{"location":"#Introduction","page":"DyadicKDE.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"This repository provides a Julia package which implements the methods for dyadic kernel density estimation detailed in Cattaneo, Feng and Underwood, 2022. In particular, the package provides the capability for computing","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"Point estimates of a dyadic density function\nPointwise confidence intervals for the density\nBonferroni-corrected confidence intervals\nUniform confidence bands\nA rule-of-thumb bandwidth selector","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"The currently supported kernels are","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"Epanechnikov, order 2\nEpanechnikov, order 4","category":"page"},{"location":"#Installation","page":"DyadicKDE.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"Install from the Julia General registry by starting a Julia interactive session and running","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"] add DyadicKDE","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"Alternatively install from source by running","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"] add \"https://github.com/WGUNDERWOOD/DyadicKDE.jl.git\"","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"The package can then be loaded with","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"using DyadicKDE","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"and tested (this may take a few minutes) with","category":"page"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"] test DyadicKDE","category":"page"},{"location":"#Dependencies","page":"DyadicKDE.jl","title":"Dependencies","text":"","category":"section"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"DyadicKDE.jl requires Julia 1.x and depends on several other Julia packages listed in Project.toml.","category":"page"},{"location":"#Quick-start-guide","page":"DyadicKDE.jl","title":"Quick start guide","text":"","category":"section"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"# load package\nusing DyadicKDE\n\n# specify parameters\nn_data = 100\nkernel_name = \"epanechnikov_order_2\"\nevals = collect(range(-2.0, stop=2.0, length=10))\nsdp_solver = \"cosmo\"\nn_resample = 1000\nsignificance_level = 0.05\np = [0.25, 0.0, 0.75]\n\n# make data and get bandwidth\ndata = make_data(n_data, p)\nh_ROT = estimate_ROT_bandwidth(data, \"epanechnikov_order_2\")\n\n# fit dyadic kernel density estimator\nest = DyadicKernelDensityEstimator(\n    kernel_name, h_ROT, significance_level,\n    n_resample, sdp_solver, evals, data, Dict())\n\nfit(est)\n\n# display properties of estimator\ndisplay(est)\n\n# display evaluation points\ndisplay(evals')\n\n# display point estimates\ndisplay(est.fhat')\n\n# display pointwise confidence intervals\ndisplay(est.pci)\n\n# display uniform confidence band\ndisplay(est.ucb)","category":"page"},{"location":"#Paper-replication","page":"DyadicKDE.jl","title":"Paper replication","text":"","category":"section"},{"location":"","page":"DyadicKDE.jl","title":"DyadicKDE.jl","text":"The table of results presented in Cattaneo, Feng and Underwood, 2022 can be replicated by running the Julia script test/paper_replication.jl. This script may take a long time to run (several hours), but can be accelerated for example by first starting Julia with julia -t 8 to use 8 CPU threads. Exact results may vary due to Julia's pseudorandom number generation.","category":"page"},{"location":"documentation/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"Modules = [DyadicKDE]","category":"page"},{"location":"documentation/#DyadicKDE.DyadicKernelDensityEstimator","page":"Documentation","title":"DyadicKDE.DyadicKernelDensityEstimator","text":"Composite type for the dyadic kernel density estimator\n\n\n\n\n\n","category":"type"},{"location":"documentation/#DyadicKDE.DyadicKernelDensityEstimator-Tuple{String, Float64, Float64, Int64, String, Vector{Float64}, LinearAlgebra.UpperTriangular{Float64, S} where S<:AbstractMatrix{Float64}, Dict}","page":"Documentation","title":"DyadicKDE.DyadicKernelDensityEstimator","text":"Construct a dyadic kernel density estimator\n\n\n\n\n\n","category":"method"},{"location":"documentation/#Base.Multimedia.display-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"Base.Multimedia.display","text":"Display a dyadic kernel density estimator\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.estimate_ROT_bandwidth-Tuple{LinearAlgebra.UpperTriangular{Float64, S} where S<:AbstractMatrix{Float64}, String}","page":"Documentation","title":"DyadicKDE.estimate_ROT_bandwidth","text":"Estimate a rule-of-thumb bandwidth from dyadic data\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.fit-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.fit","text":"Fit a dyadic kernel density estimator\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_RIMSE-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.get_RIMSE","text":"Compute the root integrated mean squared error\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_bci_average_width-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.get_bci_average_width","text":"Return the average width of the Bonferroni confidence intervals\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_bci_coverage-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.get_bci_coverage","text":"Check if the Bonferroni confidence intervals all cover the true density function\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_f-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.get_f","text":"Get the true density function from example dyadic data\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_pci_average_width-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.get_pci_average_width","text":"Return the average width of the pointwise confidence intervals\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_pci_coverage-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.get_pci_coverage","text":"Check if the pointwise confidence intervals all cover the true density function\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_ucb_average_width-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.get_ucb_average_width","text":"Return the average width of the uniform confidence band\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_ucb_coverage-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.get_ucb_coverage","text":"Check if the uniform confidence band covers the true density function\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.make_data-Tuple{Int64, Vector{Float64}}","page":"Documentation","title":"DyadicKDE.make_data","text":"Generate some example dyadic data using a Gaussian mixture model\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.mean-Tuple{Vector{var\"#s24\"} where var\"#s24\"<:Number}","page":"Documentation","title":"DyadicKDE.mean","text":"Compute the mean of a vector of numbers\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.phi-Tuple{Real}","page":"Documentation","title":"DyadicKDE.phi","text":"Compute the standard normal density function\n\n\n\n\n\n","category":"method"}]
}
