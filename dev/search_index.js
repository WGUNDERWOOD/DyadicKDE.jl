var documenterSearchIndex = {"docs":
[{"location":"#DyadicKDE.jl","page":"Home","title":"DyadicKDE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Dyadic kernel density estimation in Julia.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This repository provides a Julia package which implements the methods for dyadic kernel density estimation detailed in Cattaneo, Feng and Underwood, 2022. In particular, the package provides the capability for computing","category":"page"},{"location":"","page":"Home","title":"Home","text":"Point estimates of a univariate dyadic density function\nPointwise confidence intervals for the density\nBonferroni-corrected confidence intervals\nUniform confidence bands\nA rule-of-thumb bandwidth selector\nCounterfactual dyadic density estimation","category":"page"},{"location":"","page":"Home","title":"Home","text":"The currently supported kernels are","category":"page"},{"location":"","page":"Home","title":"Home","text":"Epanechnikov, order 2\nEpanechnikov, order 4","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install from the Julia General registry by starting a Julia interactive session and running","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add DyadicKDE","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively install from source by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add \"https://github.com/WGUNDERWOOD/DyadicKDE.jl.git\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package can then be loaded with","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DyadicKDE","category":"page"},{"location":"","page":"Home","title":"Home","text":"and tested (this may take a few minutes) with","category":"page"},{"location":"","page":"Home","title":"Home","text":"] test DyadicKDE","category":"page"},{"location":"#Dependencies","page":"Home","title":"Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DyadicKDE.jl requires Julia 1.x and depends on several other Julia packages listed in Project.toml.","category":"page"},{"location":"#Quick-start-guide","page":"Home","title":"Quick start guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# load package\nusing DyadicKDE\n\n# specify parameters\nn_data = 100\nkernel_name = \"epanechnikov_order_2\"\nevals = collect(range(-2.0, stop=2.0, length=10))\nsdp_solver = \"cosmo\"\nn_resample = 1000\nsignificance_level = 0.05\np = [0.25, 0.0, 0.75]\n\n# make data and get bandwidth\nW = make_data(n_data, p)\nh_ROT = estimate_ROT_bandwidth(W, \"epanechnikov_order_2\")\n\n# fit dyadic kernel density estimator\nest = DyadicKernelDensityEstimator(\n    kernel_name, h_ROT, significance_level,\n    n_resample, sdp_solver, evals, W, Dict())\n\nfit(est)\n\n# display properties of estimator\ndisplay(est)\n\n# display evaluation points\ndisplay(evals')\n\n# display point estimates\ndisplay(est.fhat')\n\n# display pointwise confidence intervals\ndisplay(est.pci)\n\n# display uniform confidence band\ndisplay(est.ucb)","category":"page"},{"location":"#Paper-replication","page":"Home","title":"Paper replication","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please refer to the  replication README.","category":"page"},{"location":"documentation/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"documentation/#Dyadic-kernel-density-estimation","page":"Documentation","title":"Dyadic kernel density estimation","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"Modules = [DyadicKDE]\nPages   = [\"estimation.jl\", \"kernels.jl\"]","category":"page"},{"location":"documentation/#DyadicKDE.DyadicKernelDensityEstimator","page":"Documentation","title":"DyadicKDE.DyadicKernelDensityEstimator","text":"Composite type to represent a dyadic kernel density estimator.\n\n\n\n\n\n","category":"type"},{"location":"documentation/#DyadicKDE.DyadicKernelDensityEstimator-Tuple{String, Float64, Float64, Int64, String, Vector{Float64}, LinearAlgebra.UpperTriangular{Float64, S} where S<:AbstractMatrix{Float64}, Dict}","page":"Documentation","title":"DyadicKDE.DyadicKernelDensityEstimator","text":"DyadicKernelDensityEstimator(kernel_name, bandwidth, significance_level,\n                             n_resample, sdp_solver, evals, W, meta)\n\nConstruct a dyadic kernel density estimator.\n\nArguments\n\nkernel_name::String: which kernel to use.\nbandwidth::Float64: the bandwidth for the estimator.\nsignificance_level::Float64: for the confidence band/intervals.\nn_resample::Int: the number of resamples used to construct the confidence band/intervals.\nsdp_solver::String: semi-definite program solver.\nevals::Vector{Float64}: points at which to evaluate the density estimator.\nW::UpperTriangular{Float64}: array of dyadic data.\nmeta::Dict: any extra information to pass to the estimator.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#Base.Multimedia.display-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"Base.Multimedia.display","text":"display(est::DyadicKernelDensityEstimator)\n\nDisplay a dyadic kernel density estimator.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.estimate_ROT_bandwidth-Tuple{LinearAlgebra.UpperTriangular{Float64, S} where S<:AbstractMatrix{Float64}, String}","page":"Documentation","title":"DyadicKDE.estimate_ROT_bandwidth","text":"estimate_ROT_bandwidth(W::UpperTriangular{Float64},\n                       kernel_name::String)\n\nEstimate a rule-of-thumb bandwidth from dyadic data.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.fit-Tuple{DyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.fit","text":"fit(est::DyadicKernelDensityEstimator)\n\nFit a dyadic kernel density estimator to data.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#Counterfactual-dyadic-kernel-density-estimation","page":"Documentation","title":"Counterfactual dyadic kernel density estimation","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"Modules = [DyadicKDE]\nPages   = [\"counterfactual.jl\", \"parametric_counterfactual.jl\"]","category":"page"},{"location":"documentation/#DyadicKDE.CounterfactualDyadicKernelDensityEstimator","page":"Documentation","title":"DyadicKDE.CounterfactualDyadicKernelDensityEstimator","text":"Composite type to represent a counterfactual dyadic kernel density estimator.\n\n\n\n\n\n","category":"type"},{"location":"documentation/#DyadicKDE.CounterfactualDyadicKernelDensityEstimator-Tuple{String, Float64, Float64, Int64, String, Vector{Float64}, LinearAlgebra.UpperTriangular{Float64, S} where S<:AbstractMatrix{Float64}, Vector{Int64}, Vector{Int64}, Dict}","page":"Documentation","title":"DyadicKDE.CounterfactualDyadicKernelDensityEstimator","text":"CounterfactualDyadicKernelDensityEstimator(kernel_name, bandwidth, significance_level,\n                                           n_resample, sdp_solver, evals,\n                                           W, X0, X1, meta)\n\nConstruct a counterfactual dyadic kernel density estimator.\n\nArguments\n\nkernel_name::String: which kernel to use.\nbandwidth::Float64: the bandwidth for the estimator.\nsignificance_level::Float64: for the confidence band/intervals.\nn_resample::Int: the number of resamples used to construct the confidence band/intervals.\nsdp_solver::String: semi-definite program solver.\nevals::Vector{Float64}: points at which to evaluate the density estimator.\nW::UpperTriangular{Float64}: array of treated dyadic data.\nX0::Vector{Int}: categorical vector of untreated covariates.\nX1::Vector{Int}: categorical vector of treated covariates.\nmeta::Dict: any extra information to pass to the estimator.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.ParametricCounterfactualDyadicKernelDensityEstimator","page":"Documentation","title":"DyadicKDE.ParametricCounterfactualDyadicKernelDensityEstimator","text":"Composite type to represent a counterfactual dyadic kernel density estimator.\n\n\n\n\n\n","category":"type"},{"location":"documentation/#DyadicKDE.ParametricCounterfactualDyadicKernelDensityEstimator-Tuple{String, Float64, Float64, Int64, String, Vector{Float64}, LinearAlgebra.UpperTriangular{Float64, S} where S<:AbstractMatrix{Float64}, Vector{Int64}, Vector{Int64}, Vector{Float64}, Vector{Float64}, Dict}","page":"Documentation","title":"DyadicKDE.ParametricCounterfactualDyadicKernelDensityEstimator","text":"ParametricCounterfactualDyadicKernelDensityEstimator(kernel_name, bandwidth, significance_level,\n                                                     n_resample, sdp_solver, evals,\n                                                     W, X0, X1, meta)\n\nConstruct a parametric counterfactual dyadic kernel density estimator.\n\nArguments\n\nkernel_name::String: which kernel to use.\nbandwidth::Float64: the bandwidth for the estimator.\nsignificance_level::Float64: for the confidence band/intervals.\nn_resample::Int: the number of resamples used to construct the confidence band/intervals.\nsdp_solver::String: semi-definite program solver.\nevals::Vector{Float64}: points at which to evaluate the density estimator.\nW::UpperTriangular{Float64}: array of treated dyadic data.\nX0::Vector{Int}: categorical vector of untreated covariates.\nX1::Vector{Int}: categorical vector of treated covariates.\nphat0::Vector{Float64}: vector of precomputed parametric untreated covariate estimates.\nphat1::Vector{Float64}: vector of precomputed parametric treated covariate estimates.\nmeta::Dict: any extra information to pass to the estimator.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#Base.Multimedia.display-Tuple{CounterfactualDyadicKernelDensityEstimator}","page":"Documentation","title":"Base.Multimedia.display","text":"display(est::CounterfactualDyadicKernelDensityEstimator)\n\nDisplay a counterfactual dyadic kernel density estimator.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#Base.Multimedia.display-Tuple{ParametricCounterfactualDyadicKernelDensityEstimator}","page":"Documentation","title":"Base.Multimedia.display","text":"display(est::ParametricCounterfactualDyadicKernelDensityEstimator)\n\nDisplay a parametric counterfactual dyadic kernel density estimator.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.fit-Tuple{CounterfactualDyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.fit","text":"fit(est::CounterfactualDyadicKernelDensityEstimator)\n\nFit a counterfactual dyadic kernel density estimator to data.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.fit-Tuple{ParametricCounterfactualDyadicKernelDensityEstimator}","page":"Documentation","title":"DyadicKDE.fit","text":"fit(est::ParametricCounterfactualDyadicKernelDensityEstimator)\n\nFit a parametric counterfactual dyadic kernel density estimator to data.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#Helper-functions","page":"Documentation","title":"Helper functions","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"Modules = [DyadicKDE]\nPages   = [\"helpers.jl\"]","category":"page"},{"location":"documentation/#DyadicKDE.get_RIMSE-Tuple{Vector{Float64}, Vector{Float64}}","page":"Documentation","title":"DyadicKDE.get_RIMSE","text":"get_RIMSE(fhat::Vector{Float64}, f::Vector{Float64})\n\nCompute the root integrated mean squared error of an estimate for a function.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_average_width-Tuple{Matrix{Float64}}","page":"Documentation","title":"DyadicKDE.get_average_width","text":"get_average_width(cb::Matrix{Float64})\n\nReturn the average width of a confidence band.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_coverage-Tuple{Matrix{Float64}, Vector{Float64}}","page":"Documentation","title":"DyadicKDE.get_coverage","text":"get_coverage(cb::Matrix{Float64}, f::Vector{Float64})\n\nCheck if a confidence band covers the true density function.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.get_f-Tuple{Vector{Float64}, Vector{Float64}}","page":"Documentation","title":"DyadicKDE.get_f","text":"get_f(p::Vector{Float64}, evals::Vector{Float64})\n\nGet the true density function from example dyadic Gaussian mixture data.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.make_dyadic_data-Tuple{Int64, Vector{Float64}}","page":"Documentation","title":"DyadicKDE.make_dyadic_data","text":"make_dyadic_data(n_data::Int, p::Vector{Float64})\n\nGenerate some example dyadic data using a Gaussian mixture model.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.mean-Tuple{Vector{<:Number}}","page":"Documentation","title":"DyadicKDE.mean","text":"mean(x::Vector{<:Number})\n\nCompute the mean of a vector of numbers.\n\n\n\n\n\n","category":"method"},{"location":"documentation/#DyadicKDE.phi-Tuple{Real}","page":"Documentation","title":"DyadicKDE.phi","text":"phi(t::Real)\n\nCompute the standard normal density function.\n\n\n\n\n\n","category":"method"}]
}
